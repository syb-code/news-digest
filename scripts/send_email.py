#!/usr/bin/env python3
import os, base64, json
from datetime import datetime, timedelta, timezone
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import requests

ROOT = os.path.dirname(os.path.dirname(__file__))
DOCS_DATA = os.path.join(ROOT, "docs", "data", "items.json")

GMAIL_TOKEN_URL = "https://oauth2.googleapis.com/token"
GMAIL_SEND_URL = "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"

CLIENT_ID = os.environ.get("GMAIL_CLIENT_ID")
CLIENT_SECRET = os.environ.get("GMAIL_CLIENT_SECRET")
REFRESH_TOKEN = os.environ.get("GMAIL_REFRESH_TOKEN")
SENDER_EMAIL = os.environ.get("SENDER_EMAIL")
RECIPIENT_EMAIL = os.environ.get("RECIPIENT_EMAIL")

def get_access_token():
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "refresh_token": REFRESH_TOKEN,
        "grant_type": "refresh_token",
    }
    r = requests.post(GMAIL_TOKEN_URL, data=data, timeout=20)
    r.raise_for_status()
    return r.json()["access_token"]

def load_items():
    with open(DOCS_DATA, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get("items", [])

def select_last_24h(items):
    cutoff = datetime.now(timezone.utc) - timedelta(hours=24)
    out = []
    for it in items:
        try:
            dt = datetime.fromisoformat(it["published"])
        except Exception:
            continue
        if dt >= cutoff:
            out.append(it)
    return out

def build_html(items):
    hi = [i for i in items if i.get("bucket") == "highlight"]
    dd = [i for i in items if i.get("bucket") == "deeper"]

    def section(title, arr):
        parts = [f"<h2 style='margin:16px 0 8px'>{title}</h2>"]
        if not arr:
            parts.append("<p>No items in this section in the last 24 hours.</p>")
            return "\n".join(parts)
        parts.append("<ul>")
        for i in arr[:40]:
            themes = ", ".join(i.get("themes", []))
            parts.append(
                f"<li style='margin-bottom:8px'><a href='{i['url']}' target='_blank'>{i['title']}</a>"
                f" <span style='color:#666'>[{i['source']}]</span>"
                + (f" <span style='color:#999'>({themes})</span>" if themes else "")
                + "</li>"
            )
        parts.append("</ul>")
        return "\n".join(parts)

    html = f"""
    <div style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;">
      <h1 style="margin:0 0 8px">Daily Digest</h1>
      <div style="color:#666;margin-bottom:12px">{datetime.now().strftime("%A, %B %d, %Y")}</div>
      {section("Highlights", hi)}
      {section("Deeper Dives", dd)}
      <p style="margin-top:16px;font-size:12px;color:#999">Generated by your GitHub Pages digest.</p>
    </div>
    """
    return html

def send_email(subject, html_body):
    access_token = get_access_token()
    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = SENDER_EMAIL
    msg["To"] = RECIPIENT_EMAIL
    msg.attach(MIMEText(html_body, "html", "utf-8"))
    raw = base64.urlsafe_b64encode(msg.as_bytes()).decode("utf-8")
    headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    data = {"raw": raw}
    r = requests.post(GMAIL_SEND_URL, headers=headers, json=data, timeout=30)
    r.raise_for_status()
    return r.json()

def main():
    items = load_items()
    recent = select_last_24h(items)
    html = build_html(recent)
    subject = "Your News Digest"
    res = send_email(subject, html)
    print("Email sent, id:", res.get("id"))

if __name__ == "__main__":
    main()
